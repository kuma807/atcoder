#include <bits/stdc++.h>
// #include <atcoder/modint>
#define rng(a) a.begin(),a.end()
#define rrng(a) a.rbegin(),a.rend()
#define INF 2000000000000000000
#define ll long long
#define ull unsigned long long
#define ld long double
#define pll pair<ll, ll>
using namespace std;
template<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }
template<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }
const double PI = 3.141592653589793238462643383279;
mt19937 mt{ std::random_device{}() };
vector<uniform_int_distribution<int>> random100(1);

ll N = 100;
ll M = 10;
ll tast_type = 3;
vector<ll> tast;
vector<ll> num_tast(tast_type);
vector<pll> ways = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
vector<char> ways_char = {'F', 'B', 'L', 'R'};
vector<vector<ll>> board;

bool in_board(pll a) {
  return (0 <= a.first && a.first < M) && (0 <= a.second && a.second < M);
}
void place_candy(vector<vector<ll>> &A, ll index, ll candy_type) {
  ll cnt = 0;
  for (ll i = 0; i < M; ++i) {
    for (ll j = 0; j < M; ++j) {
      if (A.at(i).at(j) == -1) {
        cnt += 1;
      }
      if (cnt == index) {
        A.at(i).at(j) = candy_type;
        return;
      }
    }
  }
}

ll calc_point(vector<vector<ll>> &A) {
  vector<vector<ll>> ids(M, vector<ll>(M, -1));
  vector<ll> num_id;
  ll id = 0;
  for (ll i = 0; i < M; ++i) {
    for (ll j = 0; j < M; ++j) {
      if (A.at(i).at(j) == -1 || ids.at(i).at(j) != -1) {
        continue;
      }
      queue<pll> q;
      q.push({i, j});
      ids.at(i).at(j) = id;
      ll cnt = 1;
      while (!q.empty()) {
        pll now = q.front();
        q.pop();
        for (ll k = 0; k < ways.size(); ++k) {
          pll next = {now.first + ways.at(k).first, now.second + ways.at(k).second};
          if (!in_board(next)) {
            continue;
          }
          if (A.at(next.first).at(next.second) != A.at(now.first).at(now.second) || ids.at(next.first).at(next.second) != -1) {
            continue;
          }
          ids.at(next.first).at(next.second) = id;
          q.push(next);
          cnt += 1;
        }
      }
      id += 1;
      num_id.push_back(cnt);
    }
  }
  ll sum_up = 0, sum_down = 0;
  for (ll i = 0; i < num_id.size(); ++i) {
    sum_up += num_id.at(i) * num_id.at(i);
  }
  for (ll i = 0; i < tast_type; ++i) {
    sum_down += num_tast.at(i) * num_tast.at(i);
  }
  sum_up *= 1000000;
  return (ll)roundl(sum_up / (ld)sum_down);
}

vector<vector<ll>> move_front(vector<vector<ll>> &A) {
  vector<vector<ll>> colom(M);
  for (ll i = 0; i < M; ++i) {
    for (ll j = 0; j < M; ++j) {
      if (A.at(i).at(j) != -1) {
        colom.at(j).push_back(A.at(i).at(j));
      }
    }
  }
  vector<vector<ll>> res(M, vector<ll>(M, -1));
  for (ll i = 0; i < M; ++i) {
    for (ll j = 0; j < colom.at(i).size(); ++j) {
      res.at(j).at(i) = colom.at(i).at(j);
    }
  }
  return res;
}

vector<vector<ll>> move_back(vector<vector<ll>> &A) {
  vector<vector<ll>> colom(M);
  for (ll i = 0; i < M; ++i) {
    for (ll j = 0; j < M; ++j) {
      if (A.at(i).at(j) != -1) {
        colom.at(j).push_back(A.at(i).at(j));
      }
    }
  }
  vector<vector<ll>> res(M, vector<ll>(M, -1));
  for (ll i = 0; i < M; ++i) {
    for (ll j = 0; j < colom.at(i).size(); ++j) {
      res.at(M - colom.at(i).size() + j).at(i) = colom.at(i).at(j);
    }
  }
  return res;
}

vector<vector<ll>> move_left(vector<vector<ll>> &A) {
  vector<vector<ll>> row(M);
  for (ll i = 0; i < M; ++i) {
    for (ll j = 0; j < M; ++j) {
      if (A.at(i).at(j) != -1) {
        row.at(i).push_back(A.at(i).at(j));
      }
    }
  }
  vector<vector<ll>> res(M, vector<ll>(M, -1));
  for (ll i = 0; i < M; ++i) {
    for (ll j = 0; j < row.at(i).size(); ++j) {
      res.at(i).at(j) = row.at(i).at(j);
    }
  }
  return res;
}

vector<vector<ll>> move_right(vector<vector<ll>> &A) {
  vector<vector<ll>> row(M);
  for (ll i = 0; i < M; ++i) {
    for (ll j = 0; j < M; ++j) {
      if (A.at(i).at(j) != -1) {
        row.at(i).push_back(A.at(i).at(j));
      }
    }
  }
  vector<vector<ll>> res(M, vector<ll>(M, -1));
  for (ll i = 0; i < M; ++i) {
    for (ll j = 0; j < row.at(i).size(); ++j) {
      res.at(i).at(M - row.at(i).size() + j) = row.at(i).at(j);
    }
  }
  return res;
}

vector<vector<ll>> move(vector<vector<ll>> &A, ll way) {
  if (way == 0) {
    return move_front(A);
  }
  else if (way == 1) {
    return move_back(A);
  }
  else if (way == 2) {
    return move_left(A);
  }
  else {
    return move_right(A);
  }
}

ld simulate_score(ll start_turn, vector<vector<ll>> &board, vector<ll> plan_ways) {
  ll itr_time = 190;
  ll sum_score = 0;
  ll left = N - start_turn;
  for (ll itr_now = 0; itr_now < itr_time; ++itr_now) {
    vector<ll> place;
    for (ll i = 0; i < (ll)plan_ways.size() - 1; ++i) {
      place.push_back(random100.at(left - i)(mt));
    }
    vector<vector<ll>> temp_board = board;
    for (ll i = 0; i < plan_ways.size(); ++i) {
      temp_board = move(temp_board, plan_ways.at(i));
      if (start_turn + i + 1 >= N) {
        break;
      }
      if (i != (ll)plan_ways.size() - 1) {
        place_candy(temp_board, place.at(i), tast.at(start_turn + i + 1));
      }
    }
    sum_score += calc_point(temp_board);
  }
  return sum_score / (ld)itr_time;
}

int main() {
  for (ll i = 0; i < N; ++i) {
    random100.push_back(uniform_int_distribution<int>(1, 1 + i));
  }
  tast = vector<ll>(N);
  board = vector<vector<ll>>(M, vector<ll>(M, -1));
  for (ll i = 0; i < N; ++i) {
    cin >> tast.at(i);
    tast.at(i) -= 1;
    num_tast.at(tast.at(i)) += 1;
  }
  clock_t start = clock();
  for (ll i = 0; i < N; ++i) {
    ll place;
    cin >> place;
    place_candy(board, place, tast.at(i));
    ll best_way = 0;
    ld temp_best_score = 0;
    for (ll j = 0; j < 4; ++j) {
      for (ll k = 0; k < 4; ++k) {
        vector<ll> plan_ways = {j, k};
        ld temp_score = simulate_score(i, board, plan_ways);
        if (temp_score > temp_best_score) {
          temp_best_score = temp_score;
          best_way = j;
        }
      }
    }
    cout << ways_char.at(best_way) << endl;
    board = move(board, best_way);
  }
  clock_t end = clock();
  cout << (ld)(end - start) / CLOCKS_PER_SEC * 1000.0 << "\n";
  // cout << calc_point(board) << "\n";
}
