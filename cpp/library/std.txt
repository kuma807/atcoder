//cin最後まで
while(cin >> s) {
  cout << s << endl;
}

//cout精度
cout << fixed << setprecision(15);

//連続する要素を一つにする
void erase_continuous(vector<ll> &A) {
  sort(rng(A));
  A.erase(unique(rng(A)), A.end());
}

//map for文
map<ll, ll> mp;
for (const auto& [key, value] : mp){
  std::cout << key << " => " << value << "\n";
}
if (mp.find(key) != mp.end()) {
  //どっかにある
}

//set for文
for(auto itr = st.begin(); itr != st.end(); ++itr) {
}
//set降順
set<ll, greater<ll>>

//sort
bool compare(vector<int> a, vector<int> b) {
  return a.at(1) <= b.at(1);
}
sort(ab.begin(), ab.end(), compare);

//popcount
__builtin_popcountll

//bitset
bitset<250000> a;
a.set(x);
a.reset(x);

//変角ソート
atan2(y, x)//[-π, π]で返す(long double)
第3,4,1,2の順番で帰ってくる

//文字⇔int
to_string(A)
stoi(A)

//エラーをファイルに出力
./compile.sh 2> error.txt

//-----------marason----------
//時間測定
clock_t start = clock();
clock_t end = clock();
if ((double)(end - start) / CLOCKS_PER_SEC > time) {
  break;
}

//unordered_map<pll, ll> mp
struct HashPair {
  //注意 constがいる
  template<class T1, class T2>
  size_t operator()(const pair<T1, T2> &p) const {
    //first分をハッシュ化する
    auto hash1 = hash<T1>{}(p.first);

    //second分をハッシュ化する
    auto hash2 = hash<T2>{}(p.second);

    //重複しないようにハッシュ処理
    size_t seed = 0;
    seed ^= hash1 + 0x9e3779b9 + (seed << 6) + (seed >> 2);
    seed ^= hash2 + 0x9e3779b9 + (seed << 6) + (seed >> 2);
    return seed;
  }
};
unordered_map<pll, T, HashPair> mp;
